//We calculate height of subtrees and check if the subtree is balanced if yes then we find the height of this subtree and check if height difference in between
//left and right subtree is less equal to 1. If not we return false other wise we return true.

class Solution{
    public:
    
    bool isHeightB(Node* root, int* height){
        
        if(!root){
            *height = 0;
            return true;
        }
        //cout<<root -> data<<endl;
        
        int lh = INT_MAX, rh = INT_MAX;
        bool isLeftB = isHeightB(root -> left, &lh);
        bool isRightB = isHeightB(root -> right, &rh);
        
        if(!isLeftB || !isRightB) return false;
        
        if(abs(lh - rh) > 1) return false;
        
        *height = 1 + max(lh, rh);
        
        return true;
        
    }
    //Function to check whether a binary tree is balanced or not.
    bool isBalanced(Node *root)
    {
        //  Your Code here
        int height = INT_MIN;
        return isHeightB(root, &height);
    }
};
