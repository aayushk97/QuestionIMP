//We compare 2 differnet indices and if the chars are same we add 1 to our answer, we also skip i or/and j to find a better answer even if it doesn't exists.
//IMP: We can also use LCS with condition that s[i] == s[j] && i != j to find the answer.

class Solution {
	public:
		int LongestRepeatingSubsequence(string str){
		    // Code here
		    vector<vector<int>> dp(str.length(), vector<int>(str.length(), INT_MIN));
		    return maxLen(str, 0, 1, dp);
		}
		
		int maxLen(string& str, int i, int j, vector<vector<int>>& dp){
		    
		    if(i == j) return INT_MIN;
		    
		    if(i == str.length() || j == str.length()) return 0;
		    
		    if(dp[i][j] != INT_MIN) return dp[i][j];
		    int maxVal = INT_MIN;
		    if(str[i] == str[j]) maxVal = 1 + maxLen(str, i+1, j+1, dp);
		    
		    int val1 = maxLen(str, i+1, j, dp);
		    
		    int val2 = maxLen(str, i, j+1, dp);
		    
		    int val3 = maxLen(str, i+1, j+1, dp);
		    return dp[i][j] = max(val1, max(val2, max(val3, maxVal)));
		}

};
